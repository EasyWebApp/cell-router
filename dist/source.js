//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('cell-router', ["web-cell"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('web-cell'));
    else
        return  this['cell-router'] = factory.call(self,this['web-cell']);

})(function (web_cell) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

function _typeof(obj) {
    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
        };
    }
    return _typeof(obj);
}

function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
        return call;
    }
    return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
        ? Object.getPrototypeOf
        : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
          };
    return _getPrototypeOf(o);
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError(
            'Super expression must either be null or a function'
        );
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf =
        Object.setPrototypeOf ||
        function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
    return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
        );
    }
    return self;
}

function _decorate(decorators, factory, superClass) {
    var r = factory(function initialize(O) {
        _initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = _decorateClass(
        _coalesceClassElements(r.d.map(_createElementDescriptor)),
        decorators
    );
    _initializeClassElements(r.F, decorated.elements);
    return _runClassFinishers(r.F, decorated.finishers);
}

function _createElementDescriptor(def) {
    var key = _toPropertyKey(def.key);
    var descriptor;
    if (def.kind === 'method') {
        descriptor = {
            value: def.value,
            writable: true,
            configurable: true,
            enumerable: false
        };
        Object.defineProperty(def.value, 'name', {
            value: _typeof(key) === 'symbol' ? '' : key,
            configurable: true
        });
    } else if (def.kind === 'get') {
        descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === 'set') {
        descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === 'field') {
        descriptor = { configurable: true, writable: true, enumerable: true };
    }
    var element = {
        kind: def.kind === 'field' ? 'field' : 'method',
        key: key,
        placement: def.static
            ? 'static'
            : def.kind === 'field'
                ? 'own'
                : 'prototype',
        descriptor: descriptor
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === 'field') element.initializer = def.value;
    return element;
}

function _coalesceGetterSetter(element, other) {
    if (element.descriptor.get !== undefined) {
        other.descriptor.get = element.descriptor.get;
    } else {
        other.descriptor.set = element.descriptor.set;
    }
}

function _coalesceClassElements(elements) {
    var newElements = [];
    var isSameElement = function isSameElement(other) {
        return (
            other.kind === 'method' &&
            other.key === element.key &&
            other.placement === element.placement
        );
    };
    for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        var other;
        if (
            element.kind === 'method' &&
            (other = newElements.find(isSameElement))
        ) {
            if (
                _isDataDescriptor(element.descriptor) ||
                _isDataDescriptor(other.descriptor)
            ) {
                if (_hasDecorators(element) || _hasDecorators(other)) {
                    throw new ReferenceError(
                        'Duplicated methods (' +
                            element.key +
                            ") can't be decorated."
                    );
                }
                other.descriptor = element.descriptor;
            } else {
                if (_hasDecorators(element)) {
                    if (_hasDecorators(other)) {
                        throw new ReferenceError(
                            "Decorators can't be placed on different accessors with for " +
                                'the same property (' +
                                element.key +
                                ').'
                        );
                    }
                    other.decorators = element.decorators;
                }
                _coalesceGetterSetter(element, other);
            }
        } else {
            newElements.push(element);
        }
    }
    return newElements;
}

function _hasDecorators(element) {
    return element.decorators && element.decorators.length;
}

function _isDataDescriptor(desc) {
    return (
        desc !== undefined &&
        !(desc.value === undefined && desc.writable === undefined)
    );
}

function _initializeClassElements(F, elements) {
    var proto = F.prototype;
    ['method', 'field'].forEach(function(kind) {
        elements.forEach(function(element) {
            var placement = element.placement;
            if (
                element.kind === kind &&
                (placement === 'static' || placement === 'prototype')
            ) {
                var receiver = placement === 'static' ? F : proto;
                _defineClassElement(receiver, element);
            }
        });
    });
}

function _initializeInstanceElements(O, elements) {
    ['method', 'field'].forEach(function(kind) {
        elements.forEach(function(element) {
            if (element.kind === kind && element.placement === 'own') {
                _defineClassElement(O, element);
            }
        });
    });
}

function _defineClassElement(receiver, element) {
    var descriptor = element.descriptor;
    if (element.kind === 'field') {
        var initializer = element.initializer;
        descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver)
        };
    }
    Object.defineProperty(receiver, element.key, descriptor);
}

function _decorateClass(elements, decorators) {
    var newElements = [];
    var finishers = [];
    var placements = { static: [], prototype: [], own: [] };
    elements.forEach(function(element) {
        _addElementPlacement(element, placements);
    });
    elements.forEach(function(element) {
        if (!_hasDecorators(element)) return newElements.push(element);
        var elementFinishersExtras = _decorateElement(element, placements);
        newElements.push(elementFinishersExtras.element);
        newElements.push.apply(newElements, elementFinishersExtras.extras);
        finishers.push.apply(finishers, elementFinishersExtras.finishers);
    });
    if (!decorators) {
        return { elements: newElements, finishers: finishers };
    }
    var result = _decorateConstructor(newElements, decorators);
    finishers.push.apply(finishers, result.finishers);
    result.finishers = finishers;
    return result;
}

function _addElementPlacement(element, placements, silent) {
    var keys = placements[element.placement];
    if (!silent && keys.indexOf(element.key) !== -1) {
        throw new TypeError('Duplicated element (' + element.key + ')');
    }
    keys.push(element.key);
}

function _decorateElement(element, placements) {
    var extras = [];
    var finishers = [];
    for (
        var decorators = element.decorators, i = decorators.length - 1;
        i >= 0;
        i--
    ) {
        var keys = placements[element.placement];
        keys.splice(keys.indexOf(element.key), 1);
        var elementObject = _fromElementDescriptor(element);
        var elementFinisherExtras = _toElementFinisherExtras(
            (0, decorators[i])(elementObject) || elementObject
        );
        element = elementFinisherExtras.element;
        _addElementPlacement(element, placements);
        if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
        }
        var newExtras = elementFinisherExtras.extras;
        if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
                _addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
        }
    }
    return { element: element, finishers: finishers, extras: extras };
}

function _decorateConstructor(elements, decorators) {
    var finishers = [];
    for (var i = decorators.length - 1; i >= 0; i--) {
        var obj = _fromClassDescriptor(elements);
        var elementsAndFinisher = _toClassDescriptor(
            (0, decorators[i])(obj) || obj
        );
        if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
        }
        if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;
            for (var j = 0; j < elements.length - 1; j++) {
                for (var k = j + 1; k < elements.length; k++) {
                    if (
                        elements[j].key === elements[k].key &&
                        elements[j].placement === elements[k].placement
                    ) {
                        throw new TypeError(
                            'Duplicated element (' + elements[j].key + ')'
                        );
                    }
                }
            }
        }
    }
    return { elements: elements, finishers: finishers };
}

function _fromElementDescriptor(element) {
    var obj = {
        kind: element.kind,
        key: element.key,
        placement: element.placement,
        descriptor: element.descriptor
    };
    var desc = { value: 'Descriptor', configurable: true };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    if (element.kind === 'field') obj.initializer = element.initializer;
    return obj;
}

function _toElementDescriptors(elementObjects) {
    if (elementObjects === undefined) return;
    return _toArray(elementObjects).map(function(elementObject) {
        var element = _toElementDescriptor(elementObject);
        _disallowProperty(elementObject, 'finisher', 'An element descriptor');
        _disallowProperty(elementObject, 'extras', 'An element descriptor');
        return element;
    });
}

function _toElementDescriptor(elementObject) {
    var kind = String(elementObject.kind);
    if (kind !== 'method' && kind !== 'field') {
        throw new TypeError(
            'An element descriptor\'s .kind property must be either "method" or' +
                ' "field", but a decorator created an element descriptor with' +
                ' .kind "' +
                kind +
                '"'
        );
    }
    var key = _toPropertyKey(elementObject.key);
    var placement = String(elementObject.placement);
    if (
        placement !== 'static' &&
        placement !== 'prototype' &&
        placement !== 'own'
    ) {
        throw new TypeError(
            'An element descriptor\'s .placement property must be one of "static",' +
                ' "prototype" or "own", but a decorator created an element descriptor' +
                ' with .placement "' +
                placement +
                '"'
        );
    }
    var descriptor = elementObject.descriptor;
    _disallowProperty(elementObject, 'elements', 'An element descriptor');
    var element = {
        kind: kind,
        key: key,
        placement: placement,
        descriptor: Object.assign({}, descriptor)
    };
    if (kind !== 'field') {
        _disallowProperty(elementObject, 'initializer', 'A method descriptor');
    } else {
        _disallowProperty(
            descriptor,
            'get',
            'The property descriptor of a field descriptor'
        );
        _disallowProperty(
            descriptor,
            'set',
            'The property descriptor of a field descriptor'
        );
        _disallowProperty(
            descriptor,
            'value',
            'The property descriptor of a field descriptor'
        );
        element.initializer = elementObject.initializer;
    }
    return element;
}

function _toElementFinisherExtras(elementObject) {
    var element = _toElementDescriptor(elementObject);
    var finisher = _optionalCallableProperty(elementObject, 'finisher');
    var extras = _toElementDescriptors(elementObject.extras);
    return { element: element, finisher: finisher, extras: extras };
}

function _fromClassDescriptor(elements) {
    var obj = { kind: 'class', elements: elements.map(_fromElementDescriptor) };
    var desc = { value: 'Descriptor', configurable: true };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    return obj;
}

function _toClassDescriptor(obj) {
    var kind = String(obj.kind);
    if (kind !== 'class') {
        throw new TypeError(
            'A class descriptor\'s .kind property must be "class", but a decorator' +
                ' created a class descriptor with .kind "' +
                kind +
                '"'
        );
    }
    _disallowProperty(obj, 'key', 'A class descriptor');
    _disallowProperty(obj, 'placement', 'A class descriptor');
    _disallowProperty(obj, 'descriptor', 'A class descriptor');
    _disallowProperty(obj, 'initializer', 'A class descriptor');
    _disallowProperty(obj, 'extras', 'A class descriptor');
    var finisher = _optionalCallableProperty(obj, 'finisher');
    var elements = _toElementDescriptors(obj.elements);
    return { elements: elements, finisher: finisher };
}

function _disallowProperty(obj, name, objectType) {
    if (obj[name] !== undefined) {
        throw new TypeError(
            objectType + " can't have a ." + name + ' property.'
        );
    }
}

function _optionalCallableProperty(obj, name) {
    var value = obj[name];
    if (value !== undefined && typeof value !== 'function') {
        throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
}

function _runClassFinishers(constructor, finishers) {
    for (var i = 0; i < finishers.length; i++) {
        var newConstructor = (0, finishers[i])(constructor);
        if (newConstructor !== undefined) {
            if (typeof newConstructor !== 'function') {
                throw new TypeError('Finishers must return a constructor.');
            }
            constructor = newConstructor;
        }
    }
    return constructor;
}

function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, 'string');
    return _typeof(key) === 'symbol' ? key : String(key);
}

function _toPrimitive(input, hint) {
    if (_typeof(input) !== 'object' || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || 'default');
        if (_typeof(res) !== 'object') return res;
        throw new TypeError('@@toPrimitive must return a primitive value.');
    }
    return (hint === 'string' ? String : Number)(input);
}

function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
}

function _nonIterableRest() {
    throw new TypeError('Invalid attempt to destructure non-iterable instance');
}

function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}

function _toConsumableArray(arr) {
    return (
        _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread()
    );
}

function _nonIterableSpread() {
    throw new TypeError('Invalid attempt to spread non-iterable instance');
}

function _iterableToArray(iter) {
    if (
        Symbol.iterator in Object(iter) ||
        Object.prototype.toString.call(iter) === '[object Arguments]'
    )
        return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }
        return arr2;
    }
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}

function _asyncToGenerator(fn) {
    return function() {
        var self = this,
            args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'next',
                    value
                );
            }
            function _throw(err) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'throw',
                    err
                );
            }
            _next(undefined);
        });
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

var _module_ = {
    './router/PageStack': {
        base: './router',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _webCell = require('web-cell');

            var _CellLoader = _interopRequireDefault(
                require('../loader/CellLoader')
            );

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * Page DOM storage
             */

            var PageStack =
                /*#__PURE__*/
                (function() {
                    /**
                     * @param {string} container     - CSS selector of Page container
                     * @param {string} [mode='hash'] - History path mode (`hash` or `path`)
                     */
                    function PageStack(container, mode) {
                        var _this = this;

                        _classCallCheck(this, PageStack);

                        /**
                         * Page count
                         *
                         * @type {number}
                         */
                        this.length = 1;
                        /**
                         * Index of last page
                         *
                         * @type {number}
                         */

                        this.last = 0;
                        /**
                         * State of last page
                         *
                         * @type {HistoryState}
                         */

                        this.lastState = {
                            tag: '',
                            path: '',
                            title: document.title,
                            index: this.last
                        };
                        /**
                         * Page container
                         *
                         * @type {Element}
                         */

                        this.container = document.querySelector(container);
                        /**
                         * History path mode (`hash` or `path`)
                         *
                         * @type {string}
                         */

                        this.mode = mode || 'hash';
                        history.replaceState(
                            this.lastState,
                            document.title,
                            ''
                        );
                        window.addEventListener(
                            'popstate',
                            /*#__PURE__*/
                            (function() {
                                var _ref = _asyncToGenerator(
                                    /*#__PURE__*/
                                    regeneratorRuntime.mark(function _callee(
                                        event
                                    ) {
                                        return regeneratorRuntime.wrap(
                                            function _callee$(_context) {
                                                while (1) {
                                                    switch (
                                                        (_context.prev =
                                                            _context.next)
                                                    ) {
                                                        case 0:
                                                            if (!event.state) {
                                                                _context.next = 3;
                                                                break;
                                                            }

                                                            _context.next = 3;
                                                            return _this.pop(
                                                                event.state
                                                            );

                                                        case 3:
                                                        case 'end':
                                                            return _context.stop();
                                                    }
                                                }
                                            },
                                            _callee,
                                            this
                                        );
                                    })
                                );

                                return function(_x) {
                                    return _ref.apply(this, arguments);
                                };
                            })()
                        );
                    }
                    /**
                     * @protected
                     *
                     * @param {string}       event      - Name of a Custom event
                     * @param {boolean}      cancelable - Whether this event can be canceled
                     * @param {HistoryState} from       - Meta of leaving page
                     * @param {HistoryState} to         - Meta of entering page
                     *
                     * @return {boolean} Whether `event.preventDefault()` invoked
                     */

                    _createClass(PageStack, [
                        {
                            key: 'dispatch',
                            value: function dispatch(
                                event,
                                cancelable,
                                from,
                                to
                            ) {
                                return (0, _webCell.trigger)(
                                    this.container,
                                    event,
                                    {
                                        from: from,
                                        to: to
                                    },
                                    true,
                                    cancelable
                                );
                            }
                            /**
                             * @protected
                             *
                             * @return {PageStack}
                             */
                        },
                        {
                            key: 'cache',
                            value: function cache() {
                                var _this$this$last;

                                this[this.last] =
                                    this[this.last] ||
                                    document.createDocumentFragment();

                                (_this$this$last = this[
                                    this.last
                                ]).append.apply(
                                    _this$this$last,
                                    _toConsumableArray(
                                        this.container.childNodes
                                    )
                                );

                                return this;
                            }
                            /**
                             * @protected
                             *
                             * @param {string} tag     - Tag name of a Page component
                             * @param {string} path    - Route path
                             * @param {string} [title]
                             */
                        },
                        {
                            key: 'record',
                            value: function record(tag, path, title) {
                                title = title || document.title;
                                this.lastState = {
                                    tag: tag,
                                    path: path,
                                    title: title,
                                    index: (this.last = this.length++)
                                };
                                history.pushState(
                                    this.lastState,
                                    title,
                                    (this.mode === 'hash' ? '#' : '') + path
                                );
                                document.title = title;
                            }
                            /**
                             * @param {string} tag     - Tag name of a Page component
                             * @param {string} path    - Route path
                             * @param {string} [title]
                             *
                             * @emits {PageChangeEvent}
                             * @emits {PageChangedEvent}
                             */
                        },
                        {
                            key: 'push',
                            value: (function() {
                                var _push = _asyncToGenerator(
                                    /*#__PURE__*/
                                    regeneratorRuntime.mark(function _callee2(
                                        tag,
                                        path,
                                        title
                                    ) {
                                        var previous, next;
                                        return regeneratorRuntime.wrap(
                                            function _callee2$(_context2) {
                                                while (1) {
                                                    switch (
                                                        (_context2.prev =
                                                            _context2.next)
                                                    ) {
                                                        case 0:
                                                            if (
                                                                !tag.includes(
                                                                    '-'
                                                                )
                                                            ) {
                                                                _context2.next = 3;
                                                                break;
                                                            }

                                                            _context2.next = 3;
                                                            return _CellLoader.default.load(
                                                                tag
                                                            );

                                                        case 3:
                                                            (previous =
                                                                history.state),
                                                                (next = {
                                                                    tag: document.createElement(
                                                                        tag
                                                                    ),
                                                                    path: path,
                                                                    title: title
                                                                });
                                                            previous.tag =
                                                                this.container
                                                                    .children[0] ||
                                                                '';

                                                            if (
                                                                this.dispatch(
                                                                    'pagechange',
                                                                    true,
                                                                    previous,
                                                                    next
                                                                )
                                                            ) {
                                                                _context2.next = 7;
                                                                break;
                                                            }

                                                            return _context2.abrupt(
                                                                'return'
                                                            );

                                                        case 7:
                                                            this.cache();
                                                            this.container.append(
                                                                next.tag
                                                            );
                                                            this.record(
                                                                tag,
                                                                path,
                                                                title
                                                            );
                                                            this.dispatch(
                                                                'pagechanged',
                                                                false,
                                                                previous,
                                                                next
                                                            );

                                                        case 11:
                                                        case 'end':
                                                            return _context2.stop();
                                                    }
                                                }
                                            },
                                            _callee2,
                                            this
                                        );
                                    })
                                );

                                return function push(_x2, _x3, _x4) {
                                    return _push.apply(this, arguments);
                                };
                            })()
                            /**
                             * @protected
                             *
                             * @param {HistoryState} state - `state` property of {@link PopStateEvent}
                             */
                        },
                        {
                            key: 'pop',
                            value: (function() {
                                var _pop = _asyncToGenerator(
                                    /*#__PURE__*/
                                    regeneratorRuntime.mark(function _callee3(
                                        state
                                    ) {
                                        var tag;
                                        return regeneratorRuntime.wrap(
                                            function _callee3$(_context3) {
                                                while (1) {
                                                    switch (
                                                        (_context3.prev =
                                                            _context3.next)
                                                    ) {
                                                        case 0:
                                                            this.length = Math.max(
                                                                this.length,
                                                                state.index + 1
                                                            );
                                                            this.lastState.tag =
                                                                this.container
                                                                    .children[0] ||
                                                                '';
                                                            tag = this.cache()[
                                                                (this.last =
                                                                    state.index)
                                                            ];

                                                            if (tag) {
                                                                _context3.next = 9;
                                                                break;
                                                            }

                                                            tag = state.tag;

                                                            if (
                                                                !tag.includes(
                                                                    '-'
                                                                )
                                                            ) {
                                                                _context3.next = 8;
                                                                break;
                                                            }

                                                            _context3.next = 8;
                                                            return _CellLoader.default.load(
                                                                tag
                                                            );

                                                        case 8:
                                                            tag = document.createElement(
                                                                tag
                                                            );

                                                        case 9:
                                                            this.container.append(
                                                                tag
                                                            );
                                                            state.tag = this.container.children[0];
                                                            this.dispatch(
                                                                'pagechanged',
                                                                false,
                                                                this.lastState,
                                                                (this.lastState = state)
                                                            );

                                                        case 12:
                                                        case 'end':
                                                            return _context3.stop();
                                                    }
                                                }
                                            },
                                            _callee3,
                                            this
                                        );
                                    })
                                );

                                return function pop(_x5) {
                                    return _pop.apply(this, arguments);
                                };
                            })()
                        }
                    ]);

                    return PageStack;
                })();
            /**
             * @typedef {Object} HistoryState
             *
             * @property {string|Element} tag   - Page component
             * @property {string}         path  - Route path
             * @property {string}         title
             * @property {number}         index - Stack index of a page
             */

            /**
             * Before changing a page
             *
             * @typedef {CustomEvent} PageChangeEvent
             *
             * @property {boolean}       bubbles     - `true`
             * @property {boolean}       cancelable  - `true`
             * @property {Object}        detail
             * @property {HistoryState}  detail.from - Leaving page
             * @property {HistoryState}  detail.to   - Entering page
             */

            /**
             * After changing a page
             *
             * @typedef {CustomEvent} PageChangedEvent
             *
             * @property {boolean}       bubbles     - `true`
             * @property {boolean}       cancelable  - `false`
             * @property {Object}        detail
             * @property {HistoryState}  detail.from - Leaving page
             * @property {HistoryState}  detail.to   - Entering page
             */

            exports.default = PageStack;
        }
    },
    './router/RouteMap': {
        base: './router',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;
            /**
             * Route map
             */

            var RouteMap =
                /*#__PURE__*/
                (function() {
                    function RouteMap() {
                        _classCallCheck(this, RouteMap);

                        /**
                         * @protected
                         *
                         * @type {Map}
                         */
                        this.map = new Map();
                    }
                    /**
                     * @param {string|RegExp}  route   - **Plain path**, **Path with colon parameters** or
                     *                                   **Regular expression**
                     * @param {*|RouteHandler} handler
                     *
                     * @return {RouteMap} This route map
                     */

                    _createClass(RouteMap, [
                        {
                            key: 'set',
                            value: function set(route, handler) {
                                var pattern = {
                                    route: route
                                };
                                if (route instanceof RegExp)
                                    (pattern.route = route + ''),
                                        (pattern.pattern = route);
                                else {
                                    if (/\/:[^/]+/.test(route)) {
                                        pattern.parameter = [];
                                        route = route.replace(
                                            /\/:([^/]+)/g,
                                            function(_, name) {
                                                return (
                                                    pattern.parameter.push(
                                                        name
                                                    ) && '/([^/]+)'
                                                );
                                            }
                                        );
                                    }

                                    pattern.pattern = new RegExp(
                                        '^'.concat(route)
                                    );
                                }
                                this.map.set(pattern, handler);
                                return this;
                            }
                            /**
                             * @param {string} route
                             *
                             * @return {RouteMap} This route map
                             */
                        },
                        {
                            key: 'delete',
                            value: function _delete(route) {
                                var _iteratorNormalCompletion = true;
                                var _didIteratorError = false;
                                var _iteratorError = undefined;

                                try {
                                    for (
                                        var _iterator = this.map
                                                .keys()
                                                [Symbol.iterator](),
                                            _step;
                                        !(_iteratorNormalCompletion = (_step = _iterator.next())
                                            .done);
                                        _iteratorNormalCompletion = true
                                    ) {
                                        var item = _step.value;
                                        if (item.route === route)
                                            this.map.delete(item);
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally {
                                    try {
                                        if (
                                            !_iteratorNormalCompletion &&
                                            _iterator.return != null
                                        ) {
                                            _iterator.return();
                                        }
                                    } finally {
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }

                                return this;
                            }
                            /**
                             * @param {string} path   - Route path
                             * @param {...*}   [data] - Extra data
                             *
                             * @return {*}
                             */
                        },
                        {
                            key: 'trigger',
                            value: function trigger(path) {
                                for (
                                    var _len = arguments.length,
                                        data = new Array(
                                            _len > 1 ? _len - 1 : 0
                                        ),
                                        _key = 1;
                                    _key < _len;
                                    _key++
                                ) {
                                    data[_key - 1] = arguments[_key];
                                }

                                var _iteratorNormalCompletion2 = true;
                                var _didIteratorError2 = false;
                                var _iteratorError2 = undefined;

                                try {
                                    for (
                                        var _iterator2 = this.map
                                                .entries()
                                                [Symbol.iterator](),
                                            _step2;
                                        !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                                            .done);
                                        _iteratorNormalCompletion2 = true
                                    ) {
                                        var route = _step2.value;
                                        var match = path.match(
                                            route[0].pattern
                                        );
                                        if (!match) continue;
                                        if (!(route[1] instanceof Function))
                                            return route[1];
                                        var parameter = {},
                                            index = 1;

                                        if (route[0].parameter) {
                                            var _iteratorNormalCompletion3 = true;
                                            var _didIteratorError3 = false;
                                            var _iteratorError3 = undefined;

                                            try {
                                                for (
                                                    var _iterator3 = route[0].parameter[
                                                            Symbol.iterator
                                                        ](),
                                                        _step3;
                                                    !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next())
                                                        .done);
                                                    _iteratorNormalCompletion3 = true
                                                ) {
                                                    var key = _step3.value;
                                                    parameter[key] =
                                                        match[index++];
                                                }
                                            } catch (err) {
                                                _didIteratorError3 = true;
                                                _iteratorError3 = err;
                                            } finally {
                                                try {
                                                    if (
                                                        !_iteratorNormalCompletion3 &&
                                                        _iterator3.return !=
                                                            null
                                                    ) {
                                                        _iterator3.return();
                                                    }
                                                } finally {
                                                    if (_didIteratorError3) {
                                                        throw _iteratorError3;
                                                    }
                                                }
                                            }
                                        } else parameter = match.slice(1);

                                        return route[1].apply(
                                            route,
                                            [parameter].concat(data)
                                        );
                                    }
                                } catch (err) {
                                    _didIteratorError2 = true;
                                    _iteratorError2 = err;
                                } finally {
                                    try {
                                        if (
                                            !_iteratorNormalCompletion2 &&
                                            _iterator2.return != null
                                        ) {
                                            _iterator2.return();
                                        }
                                    } finally {
                                        if (_didIteratorError2) {
                                            throw _iteratorError2;
                                        }
                                    }
                                }
                            }
                        }
                    ]);

                    return RouteMap;
                })();
            /**
             * Route handler
             *
             * @typedef {function(parameter: Object, data: ...*)} RouteHandler
             */

            exports.default = RouteMap;
        }
    },
    './router/CellRoute': {
        base: './router',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _webCell = require('web-cell');

            var _RouteMap = _interopRequireDefault(require('./RouteMap'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var path_tag = new WeakMap(),
                route_map = new _RouteMap.default();

            var /**
             * Route entry
             */
            CellRoute = _decorate(
                [(0, _webCell.component)()],
                function(_initialize, _HTMLElement) {
                    var CellRoute =
                        /*#__PURE__*/
                        (function(_HTMLElement2) {
                            _inherits(CellRoute, _HTMLElement2);

                            function CellRoute() {
                                var _this2;

                                _classCallCheck(this, CellRoute);

                                _this2 = _possibleConstructorReturn(
                                    this,
                                    _getPrototypeOf(CellRoute).call(this)
                                );

                                _initialize(
                                    _assertThisInitialized(
                                        _assertThisInitialized(_this2)
                                    )
                                );

                                return _this2;
                            }

                            return CellRoute;
                        })(_HTMLElement);

                    return {
                        F: CellRoute,
                        d: [
                            {
                                kind: 'method',
                                key: 'connectedCallback',
                                value: function value() {
                                    if (
                                        this.parentNode.tagName !==
                                        'CELL-ROUTER'
                                    )
                                        throw new DOMError(
                                            '<cell-route /> must be a child of <cell-router />'
                                        );
                                    var path = this.getAttribute('path'),
                                        tag = this.getAttribute('tag');
                                    path_tag.set(this, {
                                        path: path,
                                        tag: tag
                                    });
                                    route_map.set(path, tag);
                                }
                            },
                            {
                                kind: 'get',
                                key: 'path',
                                value: function value() {
                                    return path_tag.get(this).path;
                                }
                            },
                            {
                                kind: 'get',
                                key: 'tag',
                                value: function value() {
                                    return path_tag.get(this).tag;
                                }
                            },
                            {
                                kind: 'get',
                                static: true,
                                key: 'map',
                                value: function value() {
                                    return route_map;
                                }
                            }
                        ]
                    };
                },
                HTMLElement
            );

            exports.default = CellRoute;
        }
    },
    './router/CellRouter': {
        base: './router',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _webCell = require('web-cell');

            var _CellRoute = _interopRequireDefault(require('./CellRoute'));

            var _RouteMap = _interopRequireDefault(require('./RouteMap'));

            var _PageStack = _interopRequireDefault(require('./PageStack'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var path_mode = {
                    hash: 1,
                    path: 1
                },
                route_map = new _RouteMap.default();
            var page;

            var /**
             * Routes elements wrapper
             */
            CellRouter = _decorate(
                [(0, _webCell.component)()],
                function(_initialize2, _HTMLElement3) {
                    var CellRouter =
                        /*#__PURE__*/
                        (function(_HTMLElement4) {
                            _inherits(CellRouter, _HTMLElement4);

                            function CellRouter() {
                                var _this3;

                                _classCallCheck(this, CellRouter);

                                _this3 = _possibleConstructorReturn(
                                    this,
                                    _getPrototypeOf(CellRouter).call(this)
                                );
                                /**
                                 * @type {string}
                                 */

                                _initialize2(
                                    _assertThisInitialized(
                                        _assertThisInitialized(_this3)
                                    )
                                );

                                _this3.rootURL = document.URL.split(/\?|#/)[0];
                                /**
                                 * @type {boolean}
                                 */

                                _this3.loading = false;
                                return _this3;
                            }
                            /**
                             * History path mode (`hash` or `path`)
                             *
                             * @type {string}
                             */

                            return CellRouter;
                        })(_HTMLElement3);

                    return {
                        F: CellRouter,
                        d: [
                            {
                                kind: 'get',
                                key: 'mode',
                                value: function value() {
                                    var value = this.getAttribute('mode');
                                    return value in path_mode ? value : 'hash';
                                }
                            },
                            {
                                kind: 'set',
                                key: 'mode',
                                value: function value(_value) {
                                    if (_value in path_mode)
                                        this.setAttribute(
                                            'mode',
                                            (page.mode = _value + '')
                                        );
                                }
                            },
                            {
                                kind: 'get',
                                key: 'path',
                                value: function value() {
                                    return this.mode === 'hash'
                                        ? window.location.hash.slice(1)
                                        : document.URL.slice(
                                              this.rootURL.length
                                          );
                                }
                            },
                            {
                                kind: 'method',
                                key: 'connectedCallback',
                                value: (function() {
                                    var _value2 = _asyncToGenerator(
                                        /*#__PURE__*/
                                        regeneratorRuntime.mark(
                                            function _callee4() {
                                                var router, path;
                                                return regeneratorRuntime.wrap(
                                                    function _callee4$(
                                                        _context4
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context4.prev =
                                                                    _context4.next)
                                                            ) {
                                                                case 0:
                                                                    router = this;
                                                                    document.body.addEventListener(
                                                                        'click',
                                                                        (0,
                                                                        _webCell.delegate)(
                                                                            'a[href]',
                                                                            function(
                                                                                event
                                                                            ) {
                                                                                if (
                                                                                    !router.loading &&
                                                                                    (this
                                                                                        .target ||
                                                                                        '_self') ===
                                                                                        '_self'
                                                                                ) {
                                                                                    event.preventDefault();
                                                                                    router.navTo(
                                                                                        this
                                                                                    );
                                                                                }
                                                                            }
                                                                        )
                                                                    );
                                                                    _context4.next = 4;
                                                                    return _webCell.documentReady;

                                                                case 4:
                                                                    page = new _PageStack.default(
                                                                        'main',
                                                                        this.mode
                                                                    );
                                                                    page.container.addEventListener(
                                                                        'pagechanged',
                                                                        function(
                                                                            event
                                                                        ) {
                                                                            var data =
                                                                                event.detail;
                                                                            route_map.trigger(
                                                                                data
                                                                                    .to
                                                                                    .path,
                                                                                data.to,
                                                                                data.from
                                                                            );
                                                                        }
                                                                    );

                                                                    if (
                                                                        !(
                                                                            this
                                                                                .mode !==
                                                                                'hash' ||
                                                                            !this
                                                                                .path
                                                                        )
                                                                    ) {
                                                                        _context4.next = 8;
                                                                        break;
                                                                    }

                                                                    return _context4.abrupt(
                                                                        'return'
                                                                    );

                                                                case 8:
                                                                    path = this
                                                                        .path;
                                                                    history.replaceState(
                                                                        {},
                                                                        document.title,
                                                                        window
                                                                            .location
                                                                            .pathname
                                                                    );
                                                                    _context4.next = 12;
                                                                    return this.navTo(
                                                                        path
                                                                    );

                                                                case 12:
                                                                case 'end':
                                                                    return _context4.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee4,
                                                    this
                                                );
                                            }
                                        )
                                    );

                                    return function value() {
                                        return _value2.apply(this, arguments);
                                    };
                                })()
                            },
                            {
                                kind: 'get',
                                key: 'map',
                                value: function value() {
                                    var route = {};
                                    var _iteratorNormalCompletion4 = true;
                                    var _didIteratorError4 = false;
                                    var _iteratorError4 = undefined;

                                    try {
                                        for (
                                            var _iterator4 = this.children[
                                                    Symbol.iterator
                                                ](),
                                                _step4;
                                            !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next())
                                                .done);
                                            _iteratorNormalCompletion4 = true
                                        ) {
                                            var child = _step4.value;
                                            if (
                                                child instanceof
                                                _CellRoute.default
                                            )
                                                route[child.path] = child.tag;
                                        }
                                    } catch (err) {
                                        _didIteratorError4 = true;
                                        _iteratorError4 = err;
                                    } finally {
                                        try {
                                            if (
                                                !_iteratorNormalCompletion4 &&
                                                _iterator4.return != null
                                            ) {
                                                _iterator4.return();
                                            }
                                        } finally {
                                            if (_didIteratorError4) {
                                                throw _iteratorError4;
                                            }
                                        }
                                    }

                                    return route;
                                }
                            },
                            {
                                kind: 'get',
                                key: 'stack',
                                value: function value() {
                                    return page;
                                }
                            },
                            {
                                kind: 'method',
                                key: 'navTo',
                                value: (function() {
                                    var _value3 = _asyncToGenerator(
                                        /*#__PURE__*/
                                        regeneratorRuntime.mark(
                                            function _callee5(link) {
                                                var path, tag;
                                                return regeneratorRuntime.wrap(
                                                    function _callee5$(
                                                        _context5
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context5.prev =
                                                                    _context5.next)
                                                            ) {
                                                                case 0:
                                                                    this.loading = true;
                                                                    if (
                                                                        !(
                                                                            link instanceof
                                                                            HTMLElement
                                                                        )
                                                                    )
                                                                        link = Object.assign(
                                                                            document.createElement(
                                                                                'a'
                                                                            ),
                                                                            {
                                                                                href: (
                                                                                    new URL(
                                                                                        link,
                                                                                        window.location
                                                                                    ) +
                                                                                    ''
                                                                                ).replace(
                                                                                    this
                                                                                        .rootURL,
                                                                                    ''
                                                                                )
                                                                            }
                                                                        );
                                                                    path = link.getAttribute(
                                                                        'href'
                                                                    );
                                                                    tag = _CellRoute.default.map.trigger(
                                                                        path
                                                                    );

                                                                    if (!tag) {
                                                                        _context5.next = 7;
                                                                        break;
                                                                    }

                                                                    _context5.next = 7;
                                                                    return page.push(
                                                                        tag,
                                                                        path,
                                                                        link.title ||
                                                                            link.textContent.trim()
                                                                    );

                                                                case 7:
                                                                    this.loading = false;

                                                                case 8:
                                                                case 'end':
                                                                    return _context5.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee5,
                                                    this
                                                );
                                            }
                                        )
                                    );

                                    return function value(_x6) {
                                        return _value3.apply(this, arguments);
                                    };
                                })()
                            },
                            {
                                kind: 'method',
                                static: true,
                                key: 'route',
                                value: function value(path, handler) {
                                    route_map.set(path, handler);
                                    return this;
                                }
                            }
                        ]
                    };
                },
                HTMLElement
            );

            exports.default = CellRouter;
        }
    },
    './loader/CellPage': {
        base: './loader',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _webCell = require('web-cell');

            var ESM = !document.querySelector(
                    'script[src$="custom-elements-es5-adapter.js"]'
                ),
                page_data = new WeakMap();

            var CellPage = _decorate(
                [(0, _webCell.component)()],
                function(_initialize3, _HTMLElement5) {
                    var CellPage =
                        /*#__PURE__*/
                        (function(_HTMLElement6) {
                            _inherits(CellPage, _HTMLElement6);

                            function CellPage() {
                                var _this4;

                                _classCallCheck(this, CellPage);

                                _this4 = _possibleConstructorReturn(
                                    this,
                                    _getPrototypeOf(CellPage).call(this)
                                );

                                _initialize3(
                                    _assertThisInitialized(
                                        _assertThisInitialized(_this4)
                                    )
                                );

                                return _this4;
                            }

                            return CellPage;
                        })(_HTMLElement5);

                    return {
                        F: CellPage,
                        d: [
                            {
                                kind: 'method',
                                key: 'connectedCallback',
                                value: function value() {
                                    var loader = this.parentNode;
                                    if (loader.tagName === 'CELL-LOADER')
                                        page_data.set(this, {
                                            path:
                                                new URL(
                                                    this.getAttribute('path') ||
                                                        '',
                                                    loader.base
                                                ) + ''
                                        });
                                    else
                                        throw new DOMError(
                                            '<cell-page /> must be a child of <cell-loader />'
                                        );
                                }
                            },
                            {
                                kind: 'get',
                                key: 'path',
                                value: function value() {
                                    return page_data.get(this).path;
                                }
                            },
                            {
                                kind: 'get',
                                key: 'name',
                                value: function value() {
                                    return this.path.split('/').slice(-1)[0];
                                }
                            },
                            {
                                kind: 'get',
                                key: 'loaded',
                                value: function value() {
                                    return !!window.customElements.get(
                                        this.name
                                    );
                                }
                            },
                            {
                                kind: 'method',
                                key: 'load',
                                value: function value() {
                                    var _this5 = this;

                                    return this.loaded
                                        ? Promise.resolve()
                                        : new Promise(function(
                                              resolve,
                                              reject
                                          ) {
                                              return document.head.append(
                                                  Object.assign(
                                                      document.createElement(
                                                          'script'
                                                      ),
                                                      {
                                                          onload: resolve,
                                                          onerror: reject,
                                                          type: ESM
                                                              ? 'module'
                                                              : 'text/javascript',
                                                          src: ''.concat(
                                                              _this5.path,
                                                              '.js'
                                                          )
                                                      }
                                                  )
                                              );
                                          });
                                }
                            }
                        ]
                    };
                },
                HTMLElement
            );

            exports.default = CellPage;
        }
    },
    './loader/CellLoader': {
        base: './loader',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _webCell = require('web-cell');

            var _CellPage = _interopRequireDefault(require('./CellPage'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var loader = new Map();

            var /**
             * Page components loader
             */
            CellLoader = _decorate(
                [(0, _webCell.component)()],
                function(_initialize4, _HTMLElement7) {
                    var CellLoader =
                        /*#__PURE__*/
                        (function(_HTMLElement8) {
                            _inherits(CellLoader, _HTMLElement8);

                            function CellLoader() {
                                var _this6;

                                _classCallCheck(this, CellLoader);

                                _this6 = _possibleConstructorReturn(
                                    this,
                                    _getPrototypeOf(CellLoader).call(this)
                                );

                                _initialize4(
                                    _assertThisInitialized(
                                        _assertThisInitialized(_this6)
                                    )
                                );

                                return _this6;
                            }

                            return CellLoader;
                        })(_HTMLElement7);

                    return {
                        F: CellLoader,
                        d: [
                            {
                                kind: 'method',
                                key: 'connectedCallback',
                                value: function value() {
                                    loader.set(this, {
                                        base:
                                            new URL(
                                                this.getAttribute('base'),
                                                this.baseURI
                                            ) + ''
                                    });
                                }
                            },
                            {
                                kind: 'method',
                                key: 'disconnectedCallback',
                                value: function value() {
                                    loader.delete(this);
                                }
                            },
                            {
                                kind: 'get',
                                key: 'base',
                                value: function value() {
                                    return loader.get(this).base;
                                }
                            },
                            {
                                kind: 'get',
                                key: 'pageList',
                                value: function value() {
                                    return _toConsumableArray(
                                        this.children
                                    ).filter(function(element) {
                                        return (
                                            element instanceof _CellPage.default
                                        );
                                    });
                                }
                            },
                            {
                                kind: 'get',
                                static: true,
                                key: 'pageList',
                                value: function value() {
                                    var _ref2;

                                    return (_ref2 = []).concat.apply(
                                        _ref2,
                                        _toConsumableArray(
                                            _toConsumableArray(
                                                loader.keys()
                                            ).map(function(item) {
                                                return item.pageList;
                                            })
                                        )
                                    );
                                }
                            },
                            {
                                kind: 'method',
                                static: true,
                                key: 'load',
                                value: function value(tag) {
                                    return this.pageList
                                        .filter(function(page) {
                                            return page.name === tag;
                                        })[0]
                                        .load();
                                }
                            }
                        ]
                    };
                },
                HTMLElement
            );

            exports.default = CellLoader;
        }
    },
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            Object.defineProperty(exports, 'CellLoader', {
                enumerable: true,
                get: function get() {
                    return _CellLoader.default;
                }
            });
            Object.defineProperty(exports, 'CellPage', {
                enumerable: true,
                get: function get() {
                    return _CellPage.default;
                }
            });
            Object.defineProperty(exports, 'default', {
                enumerable: true,
                get: function get() {
                    return _CellRouter.default;
                }
            });
            Object.defineProperty(exports, 'CellRoute', {
                enumerable: true,
                get: function get() {
                    return _CellRoute.default;
                }
            });

            var _CellLoader = _interopRequireDefault(
                require('./loader/CellLoader')
            );

            var _CellPage = _interopRequireDefault(
                require('./loader/CellPage')
            );

            var _CellRouter = _interopRequireDefault(
                require('./router/CellRouter')
            );

            var _CellRoute = _interopRequireDefault(
                require('./router/CellRoute')
            );

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
        }
    },
    'web-cell': {
        exports: web_cell
    }
};

    return _include_('./index');
});